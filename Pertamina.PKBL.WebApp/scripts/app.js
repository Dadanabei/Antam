/* DateTime Function JS */
(function($) {
    $.fn.WebClock = function(option) {
        var defaults = $.extend({}, $.fn.WebClock.defaults, option);
        return this.each(function() {
            $$ = $(this);
            o = $.meta ? $.extend({}, defaults, $$.data()) : defaults;
            var clock = (o.clockType == "client") ? "clientClock()" : "serverClock()";

            //initial showing 
            if (o.clockType == "client") {
                clientClock();
            } else {
                serverClock();
            }

            WebClockTicking(clock);
        });
    };
    /// plugin Default options
    $.fn.WebClock.defaults = {
        clockType: "client",
        milliSecond: 1000,
        showSecondTick: true
    };

    //private function
    WebClockTicking = function(clockCall) {
        setInterval(clockCall, o.milliSecond);
    };
    serverClock = function() {
        $.ajax({
            type: "POST",
            url: "/ajax/ajaxMethod.asmx/GetServerDateTime",
            data: "{showSecondTick : " + o.showSecondTick + "}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
                $$.html(response);
            }
        })
    };
    clientClock = function() {
        var _DateTime = new Date();
        var Hours = _DateTime.getHours();
        var Minutes = _DateTime.getMinutes();

        // Pad the minutes and seconds with leading zeros, if required
        Minutes = (Minutes < 10 ? "0" : "") + Minutes;

        // Choose either "AM" or "PM" as appropriate
        var timeOfDay = (Hours < 12) ? "AM" : "PM";

        // Convert the hours component to 12-hour format if needed
        // Convert an hours component of "0" to "12"
        Hours = (((Hours > 12) ? Hours - 12 : Hours) == 0) ? 12 : Hours;

        // Compose the time string for display
        var TimeStr;
        if (o.showSecondTick) {
            var Seconds = _DateTime.getSeconds();
            Seconds = (Seconds < 10 ? "0" : "") + Seconds;
            TimeStr = Hours + ":" + Minutes + ":" + Seconds + " " + timeOfDay;
        } else {
            TimeStr = Hours + ":" + Minutes + " " + timeOfDay;
        }

        var dayName = new Array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");
        var monthName = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Juy", "Aug", "Sep", "Oct", "Nov", "Dec")
        var DateStr = dayName[_DateTime.getDay()] + ", " + _DateTime.getDate() + " " + monthName[(_DateTime.getMonth() + 1) - 1] + " " + _DateTime.getFullYear();

        $$.html(DateStr + " / " + TimeStr);
    };
})(jQuery);

/*
*  The Footer Plugin
*  
* 	Copyright© 2010 Icewares
*  
*  Licensed under the CPL (http://footer.icewares.com.br/licence.html)
*/
/*
* 	The Footer Plugin
*  version 1.0
*  Created by Stéfano Stypulkowski @ Icewares
*   
*  Require jQuery 1.4 http://footer.icewares.com.br
*  
*  For instructions see: 
*/
var id = new String();
var height = new Number();
var footerHeight = new Number();
var styleAbsolute;
var styleRelative;
var config;
var footerObject;
var browserAdjust = 0;
(function($) {
    $.fn.footer = function(options) {
        if ($(this).attr("id") == "") {
            $(this).attr("id", "footerAutoGeneratedId");
        }
        id = "#" + $(this).attr("id");

        //Remove This Styling to 'func() SetPosition', for get dynamic width too
        //styleAbsolute = { "position": "absolute", "bottom": "0", "z-index": "200", "width": $(this).prev().width() + "px" };
        //styleRelative = { "position": "relative", "bottom": "auto", "width": $(this).prev().width() + "px", "padding-top": "40px" };

        height = $(document).height();
        footerHeight = $(id).height();
        if ($.browser.msie) { browserAdjust = 4; }
        setPosition();

        var defaults = { "monitorTimeOut": 250 };
        config = $.extend(defaults, options);
        if (config.monitorTimeOut < 1) {
            config.monitorTimeOut = 1;
        }
        monitor();
    }
})(jQuery);

function monitor() {
    if (height != $(document).height()) {
        setPosition();
        height = $(document).height();
    }
    if (footerHeight != $(id).height()) {
        setFsmHeight();
        footerHeight = $(id).height();
    }
    setTimeout('monitor()', config.monitorTimeOut);
}
function setPosition() {
    //get width from parent div (which is 'html-wrapper')
    styleAbsolute = { "position": "absolute", "bottom": "0", "z-index": "2000", "width": $(id).parent().width() + "px" };
    styleRelative = { "position": "relative", "bottom": "auto", "z-index": "2000", "width": $(id).parent().width() + "px", "padding-top": "40px" };

    if (($(document).height() - browserAdjust) > $(window).height()) {
        $("#footerSpaceManager").remove();
        $(id).css(styleRelative);
    } else {
        if ($("#footerSpaceManager").size() == 0) {
            $(id).parent().append("<div id='footerSpaceManager' style='height: " + $(id).height() + "px;'></div>")
        }
        $(id).css(styleAbsolute);
    }
}
function setFsmHeight() {
    if ($("#footerSpaceManager").size() > 0 && $(id).height() != $("#footerSpaceManager").height()) {
        $("#footerSpaceManager").height($(id).height());
    }
}


// Fix IE Overflow //
// usage
//$(selector).fixIEOverflow().doOtherPlugin();
(function($) {
    $.fn.fixIEOverflow = function() {
        if ($.browser.msie) {
            return this.each(function() {
                if (this.scrollWidth > this.offsetWidth) {
                    //$(this).css({ 'padding-bottom': '20px', 'overflow-y': 'hidden' });
                    if ($.browser.version == "8.0") {
                        $(this).css({ 'overflow-y': 'hidden' });
                    }
                    else if ($.browser.version == "7.0") {
                        $(this).css({ 'padding-bottom': '17px', 'overflow-y': 'hidden' });
                    }
                }
            });
        } else {
            return this;
        }
    };
})(jQuery);


function AlertBox(Messages) {
    alert(Messages);
}
function ConfirmationBox(Messages) {
    var agree = confirm(Messages);
    if (agree) {
        return (true);
    }
    else {
        return (false);
    }
}
function NewWindow(URL, WinName, _width, _height) {
    //var w = 600;
    //var h = 550;
    var w, h;
    if (_width == null && _height == null) {
        w = 990;
        h = 690;
    }
    else {
        w = _width;
        h = _height;
    }
    var winl = (screen.width - w) / 2;
    var wint = (screen.height - h) / 2;
    winProps = 'height=' + h + ',width=' + w + ',top=' + wint + ',left=' + winl + ',resizable=no,';
    winProps += 'scrollbars=yes,status=no,toolbar=no,menubar=no,titlebar=yes,location=no,';
    win = window.open(URL, WinName, winProps)
    if (parseInt(navigator.appVersion) >= 4) { win.window.focus(); }
}

